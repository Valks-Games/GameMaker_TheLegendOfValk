<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_turret_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp = 5000
shoot_counter = 0
shoot_delay = 10
shoot_accuracy = 0 //the larger the value the more inaccurate the shot is
shoot_range = 1000
shoot_type = obj_base_bullet
rotate_speed = 1
target = obj_enemy_basic
target_last = true //if false it will target the nearest
level = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (place_meeting(x,y,par_bullet_enemy))
{
    hp--
    if (hp &lt;= 0)
    {
        instance_destroy()
    }
}

if (instance_exists(target))
{
    if (distance_to_object(target) &lt; shoot_range)
    {
        shoot_counter++
        if (shoot_counter &gt; shoot_delay)
        {
            shoot_counter = 0
            bullet = instance_create(x,y,shoot_type)
            bullet.direction = direction - shoot_accuracy/2 + irandom(shoot_accuracy)
            bullet.image_angle = image_angle - shoot_accuracy/2 + irandom(shoot_accuracy)
        }
        if (target_last)
        {
            var i;
            for (i = 0; i &lt; instance_number(target); i += 1)
            {
                testfor = instance_find(target,i);
                if (distance_to_object(testfor) &lt; shoot_range)
                {
                    inst = testfor
                }
            }
        } else 
        {
            inst = instance_nearest(x,y,target)
        }
        thedirection = point_direction(x,y,inst.x,inst.y)
        
        if (direction &gt; thedirection)
        {
            direction-=rotate_speed
            image_angle-=rotate_speed
        } else if (direction &lt; thedirection)
        {
            direction+=rotate_speed
            image_angle+=rotate_speed
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(ord("Q")))
{
    draw_set_alpha(0.2)
    draw_set_color(c_lime)
    draw_circle(x,y,shoot_range,true)
    
    if (instance_exists(target))
    {
        if (distance_to_object(target) &lt; shoot_range)
        {
            if (target_last)
            {
                var i;
                for (i = 0; i &lt; instance_number(obj_enemy_basic); i += 1)
                {
                    testfor = instance_find(obj_enemy_basic,i);
                    if (distance_to_object(testfor) &lt; shoot_range)
                    {
                        inst = testfor
                    }
                }
                draw_line(x,y,inst.x,inst.y)
            } else 
            {
                inst = instance_nearest(x,y,target)
                draw_line(x,y,inst.x,inst.y)
            }
        }
    }
    
    draw_set_alpha(1)
    draw_set_color(c_white)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
