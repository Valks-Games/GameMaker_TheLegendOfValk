<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movespeed = 15
turnspeed = 0
max_turnspeed = 7
acc = 1.2


radius = 10
rotspeed = 5


regenerate = false
regeneration_delay = 0

zoom_speed = 0
max_zoom_speed = 50
zoom_up = false

machinegun_delay = 0
missle_delay = 0
laser_delay = 0

image_angle = 0
direction = 0

global.out_of_ship = false

if (global.sheild_cost &gt;= 252)
{
    global.sheild = true
    instance_create(x,y,obj_player_sheild)
    global.has_sheild = true
}

global.menu_building_townhall = true
townhall = instance_create(x,y,obj_menu_building_townhall)
with(townhall)instance_destroy()

global.menu_building_baseupgrades = true
baseupgrades = instance_create(x,y,obj_menu_building_baseupgrades)
with(baseupgrades)instance_destroy()

global.menu_building_factory = true
factory = instance_create(x,y,obj_menu_building_factory)
with(factory)instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>the_player_sheild = instance_create(x,y,obj_player_sheild)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update values constantly

centrex = x
centrey = y

angle = direction
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player movement
if (speed &gt; movespeed) speed = movespeed
if (turnspeed &gt; max_turnspeed) turnspeed = max_turnspeed

speed = max(speed - 0.3, 0)
turnspeed = max(turnspeed - 0.3, 0)

if (global.out_of_ship == true) return 0;

if(keyboard_check(ord("A")))
{
    turnspeed+=acc
    direction+=turnspeed
    image_angle+=turnspeed
}
if(keyboard_check(ord("D")))
{
    turnspeed+=acc
    direction-=turnspeed
    image_angle-=turnspeed
}
if(keyboard_check(ord("W")))
{
    motion_add(direction,acc)
}
if(keyboard_check(ord("S")))
{
    speed = max(speed - 0.3, 0)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///zoom controls

if (mouse_wheel_up())
{
    zoom_up = true
    zoom_speed+=10
}
if (mouse_wheel_down())
{
    zoom_up = false
    zoom_speed+=10
}

zoom_speed = max(zoom_speed - 1.2, 0)

if (view_wview[0] &gt;= 1000 &amp;&amp; view_hview[0] &gt;= 500 &amp;&amp; view_wview[0] &lt;= room_width &amp;&amp; view_hview[0] &lt;= room_height)
{
    if (zoom_up)
    {
        view_wview[0] -= zoom_speed
        view_hview[0] -= zoom_speed/2
    } else 
    {
        view_wview[0] += zoom_speed
        view_hview[0] += zoom_speed/2
    }
    view_hborder[0] = view_wview[0] / 2;
    view_vborder[0] = view_hview[0] / 2;
} else
{
    zoom_speed = 0
    if (view_wview[0] &lt; 1000) view_wview[0] = 1000
    if (view_hview[0] &lt; 500) view_hview[0] = 500
    if (view_wview[0] &gt; room_width) view_wview[0] = room_width
    if (view_hview[0] &gt; room_height) view_hview[0] = room_height
}

if (zoom_speed &gt; max_zoom_speed) zoom_speed = max_zoom_speed
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///regenerate

if (instance_exists(obj_townhall))
{
    if (distance_to_object(obj_townhall) &lt; 1000)
    {
        regenerate = true
    } else 
    {
        regenerate = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///get out of ship
if (global.out_of_ship == false){
  if (keyboard_check(ord("E"))){
    global.out_of_ship = true
    instance_create(x,y,obj_player_infantry)
    view_object[0] = obj_player_infantry;
  }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///machine gun code



//angle+=rotspeed
angle = angle mod 360

if (angle &lt; 0) angle+=360

bx = centrex + lengthdir_x(radius,angle)
by = centrey + lengthdir_y(radius,angle)

machinegun_delay++

if (global.out_of_ship) return 0;
if (machinegun_delay &lt; global.machinegun_firerate) return 0;

machinegun_delay = 0

switch(global.machinegun_amount)
{
    case 0:
    {
      bullet1 = instance_create(bx,by,obj_bullet)
      bullet1.direction = angle
      bullet1.image_angle = angle
      break;
    }
    case 1:
    {
      bullet1 = instance_create(bx,by,obj_bullet)
      bullet1.direction = angle
      bullet1.image_angle = angle
      break;
    }
    case 2:
    {
      bullet1 = instance_create(bx + 10,by - 20,obj_bullet)
      bullet2 = instance_create(bx - 10,by - 20,obj_bullet)

      bullet1.direction = angle
      bullet1.image_angle = angle
      bullet2.direction = angle
      bullet2.image_angle = angle
      break;
    }
    case 3:
    {
      bullet1 = instance_create(bx + 10,by - 20,obj_bullet)
      bullet2 = instance_create(bx - 10,by - 20,obj_bullet)
      bullet3 = instance_create(bx,by,obj_bullet)

      bullet1.direction = direction
      bullet1.image_angle = image_angle
      bullet2.direction = direction
      bullet2.image_angle = image_angle
      bullet3.direction = direction
      bullet3.image_angle = image_angle
      break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///missle code

missle_delay++

if (global.out_of_ship) return 0;
if (missle_delay &lt; global.missle_firerate) return 0;

missle_delay = 0

switch(global.missle_amount)
{
    case 0:
    {
        break;
    }
    case 1:
    {
        bullet1 = instance_create(x,y,obj_missle)
        bullet1.direction = direction
        bullet1.image_angle = direction
        break;
    }
    case 2:
    {
        bullet1 = instance_create(x + 10,y - 20,obj_missle)
        bullet2 = instance_create(x - 10,y - 20,obj_missle)

        bullet1.direction = direction
        bullet1.image_angle = direction
        bullet2.direction = direction
        bullet2.image_angle = direction
        break;
    }
    case 3:
    {
        bullet1 = instance_create(x,y,obj_missle)
        bullet2 = instance_create(x,y,obj_missle)
        bullet3 = instance_create(x,y,obj_missle)

        bullet1.direction = direction
        bullet1.image_angle = direction
        bullet2.direction = direction - 45
        bullet2.image_angle = direction - 45
        bullet3.direction = direction + 45
        bullet3.image_angle = direction + 45
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///laser code

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_bullet_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///par_bullet_enemy

if (global.out_of_ship) return 0;

global.hp--

if (global.hp &lt;= 0)
{
  global.gameover = true
  instance_create(x,y,obj_gameover)
  instance_destroy()
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>par_bullet_friendly</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///for the friendly bullets

instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw stats to player

draw_set_color(c_white)
draw_set_font(fnt_main)
draw_text(x,y,"HP " + string(global.hp))
draw_text(x,y+10,"Coins " + string(global.money))
draw_text(x,y+20,"Score " + string(global.score_player))
if (global.sheild)
{
    draw_text(x,y+30,"Sheild " + string(global.sheild_hp))
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the menus

if (!instance_exists(obj_player_ship)) return 0;

if (instance_exists(obj_townhall))
{
    if (distance_to_object(obj_townhall) &lt; 1000 &amp;&amp; global.hp &lt; global.hp_max)
    {
      regenerate = true
      ///regeneration code

      if (regenerate == true)
      {
        regeneration_delay++

        if (regeneration_delay &lt; 15) return 0

        regeneration_delay = 0
        if (global.hp &lt; global.hp_max){
          global.hp++
        }
      }
      draw_set_color(c_lime)
      draw_set_alpha(0.2)
      for (var i = 0; i &lt; 10; i++)
      {
        draw_line(x+(i),y+(i),obj_townhall.x,obj_townhall.y)
      }
      draw_set_alpha(1)
      draw_set_color(c_white)
    } else {
      regenerate = false
    }
    if (distance_to_object(obj_townhall) &lt; 100)
    {
        if (global.menu_building_townhall == false)
        {
            global.menu_building_townhall = true
            townhall = instance_create(x,y,obj_menu_building_townhall)
        }
        draw_set_alpha(0.2)
        draw_line(x,y,obj_townhall.x,obj_townhall.y)
        draw_set_alpha(1)
    } else
    {
        global.menu_building_townhall = false
        with(townhall)
        {
            instance_destroy()
        }
    }
}

if (instance_exists(obj_building_upgrades))
{
    if (distance_to_object(obj_building_upgrades) &lt; 100)
    {
        if (global.menu_building_baseupgrades == false)
        {
            global.menu_building_baseupgrades = true
            baseupgrades = instance_create(x,y,obj_menu_building_baseupgrades)
        }
        draw_set_alpha(0.2)
        draw_line(x,y,obj_building_upgrades.x,obj_building_upgrades.y)
        draw_set_alpha(1)
    } else 
    {
        global.menu_building_baseupgrades = false
        with(baseupgrades)
        {
            instance_destroy()
        }
    }
}

if (instance_exists(obj_building_factory))
{
    if (distance_to_object(obj_building_factory) &lt; 100)
    {
        if (global.menu_building_factory == false)
        {
            global.menu_building_factory = true
            factory = instance_create(x,y,obj_menu_building_factory)
        }
        draw_set_alpha(0.2)
        draw_line(x,y,obj_building_factory.x,obj_building_factory.y)
        draw_set_alpha(1)
    } else 
    {
        global.menu_building_factory = false
        with(factory)
        {
            instance_destroy()
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///info displayed when F is pressed

if (keyboard_check(ord("F")))
{
    if (instance_exists(par_enemy))
    {
        draw_set_color(c_white)
        draw_set_alpha(0.1)
        var i;
        for (i = 0; i &lt; instance_number(obj_enemy_basic); i += 1)
        {
            basic = instance_find(obj_enemy_basic,i);
            draw_line(x,y,basic.x,basic.y)
            
            
        }
        
        draw_set_color(c_white)
        draw_set_alpha(0.5)
        var a;
        for (a = 0; a &lt; instance_number(obj_enemy_boss); a += 1)
        {
            boss = instance_find(obj_enemy_boss,i);
            draw_line(x,y,boss.x,boss.y)
        }
        
        draw_set_alpha(1)
        draw_set_color(c_white)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
